// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.1
// source: api/p2p.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PeerToPeerClient is the client API for PeerToPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerToPeerClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error)
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	EventStream(ctx context.Context, opts ...grpc.CallOption) (PeerToPeer_EventStreamClient, error)
	Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error)
}

type peerToPeerClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerToPeerClient(cc grpc.ClientConnInterface) PeerToPeerClient {
	return &peerToPeerClient{cc}
}

func (c *peerToPeerClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/p2p.api.PeerToPeer/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerToPeerClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*DisconnectResponse, error) {
	out := new(DisconnectResponse)
	err := c.cc.Invoke(ctx, "/p2p.api.PeerToPeer/Disconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerToPeerClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/p2p.api.PeerToPeer/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerToPeerClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (PeerToPeer_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeerToPeer_ServiceDesc.Streams[0], "/p2p.api.PeerToPeer/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerToPeerEventStreamClient{stream}
	return x, nil
}

type PeerToPeer_EventStreamClient interface {
	Send(*EventRequest) error
	Recv() (*EventResponse, error)
	grpc.ClientStream
}

type peerToPeerEventStreamClient struct {
	grpc.ClientStream
}

func (x *peerToPeerEventStreamClient) Send(m *EventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerToPeerEventStreamClient) Recv() (*EventResponse, error) {
	m := new(EventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerToPeerClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/p2p.api.PeerToPeer/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerToPeerServer is the server API for PeerToPeer service.
// All implementations must embed UnimplementedPeerToPeerServer
// for forward compatibility
type PeerToPeerServer interface {
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error)
	Event(context.Context, *EventRequest) (*EventResponse, error)
	EventStream(PeerToPeer_EventStreamServer) error
	Health(context.Context, *Empty) (*HealthResponse, error)
	mustEmbedUnimplementedPeerToPeerServer()
}

// UnimplementedPeerToPeerServer must be embedded to have forward compatible implementations.
type UnimplementedPeerToPeerServer struct {
}

func (UnimplementedPeerToPeerServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedPeerToPeerServer) Disconnect(context.Context, *DisconnectRequest) (*DisconnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Disconnect not implemented")
}
func (UnimplementedPeerToPeerServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedPeerToPeerServer) EventStream(PeerToPeer_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedPeerToPeerServer) Health(context.Context, *Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPeerToPeerServer) mustEmbedUnimplementedPeerToPeerServer() {}

// UnsafePeerToPeerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerToPeerServer will
// result in compilation errors.
type UnsafePeerToPeerServer interface {
	mustEmbedUnimplementedPeerToPeerServer()
}

func RegisterPeerToPeerServer(s grpc.ServiceRegistrar, srv PeerToPeerServer) {
	s.RegisterService(&PeerToPeer_ServiceDesc, srv)
}

func _PeerToPeer_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerToPeerServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.api.PeerToPeer/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerToPeerServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerToPeer_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerToPeerServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.api.PeerToPeer/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerToPeerServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerToPeer_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerToPeerServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.api.PeerToPeer/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerToPeerServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerToPeer_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerToPeerServer).EventStream(&peerToPeerEventStreamServer{stream})
}

type PeerToPeer_EventStreamServer interface {
	Send(*EventResponse) error
	Recv() (*EventRequest, error)
	grpc.ServerStream
}

type peerToPeerEventStreamServer struct {
	grpc.ServerStream
}

func (x *peerToPeerEventStreamServer) Send(m *EventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerToPeerEventStreamServer) Recv() (*EventRequest, error) {
	m := new(EventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PeerToPeer_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerToPeerServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2p.api.PeerToPeer/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerToPeerServer).Health(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerToPeer_ServiceDesc is the grpc.ServiceDesc for PeerToPeer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerToPeer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p2p.api.PeerToPeer",
	HandlerType: (*PeerToPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _PeerToPeer_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _PeerToPeer_Disconnect_Handler,
		},
		{
			MethodName: "Event",
			Handler:    _PeerToPeer_Event_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _PeerToPeer_Health_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _PeerToPeer_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/p2p.proto",
}
